Copyright (C) 2014 Massachusetts Institute of Technology
This is free software; see the source for copying conditions. There is NO warranty; not
even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

Image saved on Monday May 19, 2014 at 9:55:33 PM
  Release 9.2 || Microcode 15.1 || Runtime 15.7 || Win32 1.8 || SF 4.41 || LIAR/i386 4.118
  Edwin 3.116
;You are in an interaction window of the Edwin editor.
;Type `C-h' for help, or `C-h t' for a tutorial.
;`C-h m' will describe some commands.
;`C-h' means: hold down the Ctrl key and type `h'.
;Package: (user)

(define (average a b) (/ (+ a b) 2))

(define (sqrt-improve guess x)
  (average guess (/ x guess))
)

(define (sqrt-stream x)
  (define (sqrt-improve-pairs guess x)
    (cons-stream (average guess (/ x guess)) (sqrt-improve-pairs (average guess (/ x guess)) x))
    )
  (sqrt-improve-pairs 1.0 x)
)

(define (stream_ref s n)
  (if (= n 1) (stream-car s) (stream_ref (stream-cdr s) (- n 1)))
)
;Value: average

;Value: sqrt-improve

;Value: sqrt-stream

;Value: stream_ref

(define sqrt_s1 (sqrt-stream 3))
;Value: sqrt_s1

(stream_ref sqrt_s1 1)
;Value: 2.

(stream_ref sqrt_s1 5)
;Value: 1.7320508075688772

(define (args-test . args)
  (display args)
  (newline)
  (display (map car args))
  (newline)
  (display (map cdr args))
)
;Value: args-test

(args-test (list 1 3 5) (list 2 4 6))
((1 3 5) (2 4 6))
(1 2)
((3 5) (4 6))
;Unspecified return value

(define (stream-int)
  (define (int-stream-from-n n) (cons-stream n (int-stream-from-n (+ n 1))))
  (int-stream-from-n 0)
)
;Value: stream-int

(define s_int1 (stream-int))
;Value: s_int1

s_int1
;Value 11: (0 . #[promise 12])

(stream_ref s_int1 10)
;Value: 9

(define (stream-map proc . argstreams)
  (if (null? (car argstreams)) ()
      (cons-stream
       (apply proc (map stream-car argstreams))
       (apply stream-map (cons proc (map stream-cdr argstreams)))
       )
      )
)
;Value: stream-map

(define s_int2 (stream-int))
;Value: s_int2

(define s_int3 (stream-map + s_int1 s_int2))
;Value: s_int3

(stream_ref s_int3 10)
;Value: 18

(define (stream_interleaved_sign_odd_num n)
  (cons-stream n (stream_interleaved_sign_odd_num (* -1 (+ n 2))))
)
;Value: stream_interleaved_sign_odd_num

(define stream_odd_int (stream_interleaved_sign_odd_num 1))
;Value: stream_odd_int

stream_odd_int
;Value 14: (1 . #[promise 15])

(stream_ref stream_odd_int 4)
;Value: -3

(stream_ref stream_odd_int 2)
;Value: -3

(abs)
;The procedure #[compiled-procedure 16 ("arith" #xba) #xf #x20bfac7] has been called with 0 arguments; it requires exactly 1 argument.
;To continue, call RESTART with an option number:
; (RESTART 1) => Return to read-eval-print level 1.
;Start debugger? (y or n): n

(abs -3)
;Value: 3

(define (stream_interleaved_sign_odd_num n)
  (cons-stream n (stream_interleaved_sign_odd_num (* -1 (+ (abs n) 2))))
)
;Value: stream_interleaved_sign_odd_num

(define stream_odd_int (stream_interleaved_sign_odd_num 1))
;Value: stream_odd_int

(stream_ref stream_odd_int 4)
;Value: -7

(stream_ref stream_odd_int 10)
;Value: -19

stream_odd_int
;Value 17: (1 . #[promise 18])

(/ 1.0 2)
;Value: .5

(define pi_stream
  (* 4 (apply + (stream-map (lambda (x) (/ 1.0 x)) stream_odd_int)))
)
;apply: Improper argument list (1. . #[promise 19])
;To continue, call RESTART with an option number:
; (RESTART 2) => Return to read-eval-print level 2.
; (RESTART 1) => Return to read-eval-print level 1.
;Start debugger? (y or n): n

(define pi_stream
  (* 4 (apply + (stream-map (lambda (x) (/ 1.0 x)) stream_odd_int)))
)
;apply: Improper argument list (1. . #[promise 20])
;To continue, call RESTART with an option number:
; (RESTART 3) => Return to read-eval-print level 3.
; (RESTART 2) => Return to read-eval-print level 2.
; (RESTART 1) => Return to read-eval-print level 1.
;Start debugger? (y or n): y
;Starting debugger...

(pp stream-apply)
;Unbound variable: stream-apply
;To continue, call RESTART with an option number:
; (RESTART 6) => Specify a value to use instead of stream-apply.
; (RESTART 5) => Define stream-apply to a given value.
; (RESTART 4) => Return to read-eval-print level 4.
; (RESTART 3) => Return to read-eval-print level 3.
; (RESTART 2) => Return to read-eval-print level 2.
; (RESTART 1) => Return to read-eval-print level 1.
;Start debugger? (y or n): n

(define stream_odd_real (stream-map (lambda (x) (/ 1.0 x)) stream_odd_int))
;Value: stream_odd_real

stream_odd_read
;Unbound variable: stream_odd_read
;To continue, call RESTART with an option number:
; (RESTART 7) => Specify a value to use instead of stream_odd_read.
; (RESTART 6) => Define stream_odd_read to a given value.
; (RESTART 5) => Return to read-eval-print level 5.
; (RESTART 4) => Return to read-eval-print level 4.
; (RESTART 3) => Return to read-eval-print level 3.
; (RESTART 2) => Return to read-eval-print level 2.
; (RESTART 1) => Return to read-eval-print level 1.
;Start debugger? (y or n): n

stream_odd_real
;Value 22: (1. . #[promise 23])

(stream_ref stream_odd_real 5)
;Value: -.1111111111111111

(/ 1.0 9)
;Value: .1111111111111111

(stream_ref stream_odd_int 4)
;Value: -7

(stream_ref stream_odd_int 5)
;Value: -9

(define (stream_interleaved_sign_odd_num n)
  (define (interleaved_sign_odd_num k)
    (if (> k 0) (* -1 (+ k 2)) (* -1 (- k 2)))
    )
  (cons-stream n (stream_interleaved_sign_odd_num (interleaved_sign_odd_num n)))
)
;Value: stream_interleaved_sign_odd_num

(define stream_odd_int (stream_interleaved_sign_odd_num 1))
;Value: stream_odd_int

stream_odd_int
;Value 24: (1 . #[promise 25])

(stream-ref stream_odd_int 5)
;Value: -11

(stream-ref stream_odd_int 4)
;Value: 9

(stream-ref stream_odd_int 3)
;Value: -7

(stream-ref stream_odd_int 2)
;Value: 5

(stream-ref stream_odd_int 1)
;Value: -3

(stream-ref stream_odd_int 0)
;Value: 1

(define stream_odd_real (stream-map (lambda (x) (/ 1.0 x)) stream_odd_int))
;Value: stream_odd_real

(stream_ref stream_odd_real 4)
;Value: -.14285714285714285

(/ 1.0 9)
;Value: .1111111111111111

(stream_ref stream_odd_real 0)

;Aborting!: out of memory
;Aborting!: out of memory
;Aborting!: out of memory
;Aborting!: out of memory
;Aborting!: out of memory
;Quit!

;Quit!

;Quit!

;Quit!

;Aborting!: out of memory
;Aborting!: out of memory
;Aborting!: out of memory
;Aborting!: out of memory
;Aborting!: out of memory
;Aborting!: out of memory
;Aborting!: out of memory
;Aborting!: out of memory
;Aborting!: out of memory
;Aborting!: out of memory
;Aborting!: out of memory
;Aborting!: out of memory
;Aborting!: out of memory
;Aborting!: out of memory
;Aborting!: out of memory
;Aborting!: out of memory
;Aborting!: out of memory
;Aborting!: out of memory
;Aborting!: out of memory
;Aborting!: out of memory
;Aborting!: out of memory
;Aborting!: out of memory



